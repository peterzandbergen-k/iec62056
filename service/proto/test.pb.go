// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.20.1
// 	protoc        v3.11.4
// source: test.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GetMeasurementsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device string               `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	From   *timestamp.Timestamp `protobuf:"bytes,10,opt,name=from,proto3" json:"from,omitempty"`
	To     *timestamp.Timestamp `protobuf:"bytes,11,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *GetMeasurementsRequest) Reset() {
	*x = GetMeasurementsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMeasurementsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMeasurementsRequest) ProtoMessage() {}

func (x *GetMeasurementsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMeasurementsRequest.ProtoReflect.Descriptor instead.
func (*GetMeasurementsRequest) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{0}
}

func (x *GetMeasurementsRequest) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *GetMeasurementsRequest) GetFrom() *timestamp.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *GetMeasurementsRequest) GetTo() *timestamp.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

type GetMeasurementsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device string               `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	From   *timestamp.Timestamp `protobuf:"bytes,10,opt,name=from,proto3" json:"from,omitempty"`
	To     *timestamp.Timestamp `protobuf:"bytes,11,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *GetMeasurementsResponse) Reset() {
	*x = GetMeasurementsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMeasurementsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMeasurementsResponse) ProtoMessage() {}

func (x *GetMeasurementsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMeasurementsResponse.ProtoReflect.Descriptor instead.
func (*GetMeasurementsResponse) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{1}
}

func (x *GetMeasurementsResponse) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *GetMeasurementsResponse) GetFrom() *timestamp.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *GetMeasurementsResponse) GetTo() *timestamp.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

type VoidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VoidRequest) Reset() {
	*x = VoidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoidRequest) ProtoMessage() {}

func (x *VoidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoidRequest.ProtoReflect.Descriptor instead.
func (*VoidRequest) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{2}
}

type GetMeasurementResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetMeasurementResponse) Reset() {
	*x = GetMeasurementResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMeasurementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMeasurementResponse) ProtoMessage() {}

func (x *GetMeasurementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMeasurementResponse.ProtoReflect.Descriptor instead.
func (*GetMeasurementResponse) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{3}
}

var File_test_proto protoreflect.FileDescriptor

var file_test_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8c, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x02, 0x74, 0x6f, 0x22, 0x8d, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x02, 0x74, 0x6f, 0x22, 0x0d, 0x0a, 0x0b, 0x56, 0x6f, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xfd, 0x01, 0x0a,
	0x12, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x54, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x47, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x4c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x48, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x09, 0x5a, 0x07,
	0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_test_proto_rawDescOnce sync.Once
	file_test_proto_rawDescData = file_test_proto_rawDesc
)

func file_test_proto_rawDescGZIP() []byte {
	file_test_proto_rawDescOnce.Do(func() {
		file_test_proto_rawDescData = protoimpl.X.CompressGZIP(file_test_proto_rawDescData)
	})
	return file_test_proto_rawDescData
}

var file_test_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_test_proto_goTypes = []interface{}{
	(*GetMeasurementsRequest)(nil),  // 0: proto.GetMeasurementsRequest
	(*GetMeasurementsResponse)(nil), // 1: proto.GetMeasurementsResponse
	(*VoidRequest)(nil),             // 2: proto.VoidRequest
	(*GetMeasurementResponse)(nil),  // 3: proto.GetMeasurementResponse
	(*timestamp.Timestamp)(nil),     // 4: google.protobuf.Timestamp
}
var file_test_proto_depIdxs = []int32{
	4, // 0: proto.GetMeasurementsRequest.from:type_name -> google.protobuf.Timestamp
	4, // 1: proto.GetMeasurementsRequest.to:type_name -> google.protobuf.Timestamp
	4, // 2: proto.GetMeasurementsResponse.from:type_name -> google.protobuf.Timestamp
	4, // 3: proto.GetMeasurementsResponse.to:type_name -> google.protobuf.Timestamp
	0, // 4: proto.MeasurementService.GetMeasurements:input_type -> proto.GetMeasurementsRequest
	2, // 5: proto.MeasurementService.GetLastMeasurement:input_type -> proto.VoidRequest
	2, // 6: proto.MeasurementService.GetFirstMeasurement:input_type -> proto.VoidRequest
	1, // 7: proto.MeasurementService.GetMeasurements:output_type -> proto.GetMeasurementsResponse
	3, // 8: proto.MeasurementService.GetLastMeasurement:output_type -> proto.GetMeasurementResponse
	3, // 9: proto.MeasurementService.GetFirstMeasurement:output_type -> proto.GetMeasurementResponse
	7, // [7:10] is the sub-list for method output_type
	4, // [4:7] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_test_proto_init() }
func file_test_proto_init() {
	if File_test_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_test_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMeasurementsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMeasurementsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMeasurementResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_test_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_test_proto_goTypes,
		DependencyIndexes: file_test_proto_depIdxs,
		MessageInfos:      file_test_proto_msgTypes,
	}.Build()
	File_test_proto = out.File
	file_test_proto_rawDesc = nil
	file_test_proto_goTypes = nil
	file_test_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MeasurementServiceClient is the client API for MeasurementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MeasurementServiceClient interface {
	GetMeasurements(ctx context.Context, opts ...grpc.CallOption) (MeasurementService_GetMeasurementsClient, error)
	GetLastMeasurement(ctx context.Context, in *VoidRequest, opts ...grpc.CallOption) (*GetMeasurementResponse, error)
	GetFirstMeasurement(ctx context.Context, in *VoidRequest, opts ...grpc.CallOption) (*GetMeasurementResponse, error)
}

type measurementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMeasurementServiceClient(cc grpc.ClientConnInterface) MeasurementServiceClient {
	return &measurementServiceClient{cc}
}

func (c *measurementServiceClient) GetMeasurements(ctx context.Context, opts ...grpc.CallOption) (MeasurementService_GetMeasurementsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MeasurementService_serviceDesc.Streams[0], "/proto.MeasurementService/GetMeasurements", opts...)
	if err != nil {
		return nil, err
	}
	x := &measurementServiceGetMeasurementsClient{stream}
	return x, nil
}

type MeasurementService_GetMeasurementsClient interface {
	Send(*GetMeasurementsRequest) error
	Recv() (*GetMeasurementsResponse, error)
	grpc.ClientStream
}

type measurementServiceGetMeasurementsClient struct {
	grpc.ClientStream
}

func (x *measurementServiceGetMeasurementsClient) Send(m *GetMeasurementsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *measurementServiceGetMeasurementsClient) Recv() (*GetMeasurementsResponse, error) {
	m := new(GetMeasurementsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *measurementServiceClient) GetLastMeasurement(ctx context.Context, in *VoidRequest, opts ...grpc.CallOption) (*GetMeasurementResponse, error) {
	out := new(GetMeasurementResponse)
	err := c.cc.Invoke(ctx, "/proto.MeasurementService/GetLastMeasurement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *measurementServiceClient) GetFirstMeasurement(ctx context.Context, in *VoidRequest, opts ...grpc.CallOption) (*GetMeasurementResponse, error) {
	out := new(GetMeasurementResponse)
	err := c.cc.Invoke(ctx, "/proto.MeasurementService/GetFirstMeasurement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeasurementServiceServer is the server API for MeasurementService service.
type MeasurementServiceServer interface {
	GetMeasurements(MeasurementService_GetMeasurementsServer) error
	GetLastMeasurement(context.Context, *VoidRequest) (*GetMeasurementResponse, error)
	GetFirstMeasurement(context.Context, *VoidRequest) (*GetMeasurementResponse, error)
}

// UnimplementedMeasurementServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMeasurementServiceServer struct {
}

func (*UnimplementedMeasurementServiceServer) GetMeasurements(MeasurementService_GetMeasurementsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMeasurements not implemented")
}
func (*UnimplementedMeasurementServiceServer) GetLastMeasurement(context.Context, *VoidRequest) (*GetMeasurementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastMeasurement not implemented")
}
func (*UnimplementedMeasurementServiceServer) GetFirstMeasurement(context.Context, *VoidRequest) (*GetMeasurementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFirstMeasurement not implemented")
}

func RegisterMeasurementServiceServer(s *grpc.Server, srv MeasurementServiceServer) {
	s.RegisterService(&_MeasurementService_serviceDesc, srv)
}

func _MeasurementService_GetMeasurements_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MeasurementServiceServer).GetMeasurements(&measurementServiceGetMeasurementsServer{stream})
}

type MeasurementService_GetMeasurementsServer interface {
	Send(*GetMeasurementsResponse) error
	Recv() (*GetMeasurementsRequest, error)
	grpc.ServerStream
}

type measurementServiceGetMeasurementsServer struct {
	grpc.ServerStream
}

func (x *measurementServiceGetMeasurementsServer) Send(m *GetMeasurementsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *measurementServiceGetMeasurementsServer) Recv() (*GetMeasurementsRequest, error) {
	m := new(GetMeasurementsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MeasurementService_GetLastMeasurement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeasurementServiceServer).GetLastMeasurement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MeasurementService/GetLastMeasurement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeasurementServiceServer).GetLastMeasurement(ctx, req.(*VoidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeasurementService_GetFirstMeasurement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeasurementServiceServer).GetFirstMeasurement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MeasurementService/GetFirstMeasurement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeasurementServiceServer).GetFirstMeasurement(ctx, req.(*VoidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MeasurementService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MeasurementService",
	HandlerType: (*MeasurementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLastMeasurement",
			Handler:    _MeasurementService_GetLastMeasurement_Handler,
		},
		{
			MethodName: "GetFirstMeasurement",
			Handler:    _MeasurementService_GetFirstMeasurement_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMeasurements",
			Handler:       _MeasurementService_GetMeasurements_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "test.proto",
}
